name: hub-mirror-by-issue-multiple

on:
  issues:
    types:
      - opened

permissions:
  issues: write

jobs:
  build:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'hub-mirror-multiple')
    env:
      QYWX_ROBOT_URL: ${{ secrets.QYWX_ROBOT_URL }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.DOCKER_XXX_TOKEN }}

      - name: Parse input and generate image list
        env:
          GH_TOKEN: ${{ github.token }}
          TITLE: ${{ github.event.issue.title }}
          BODY: ${{ github.event.issue.body }}
        run: |
          # 解析标题中的仓库地址、名称空间和架构
          TARGET_REGISTRY=$(echo "$TITLE" | awk -F '[:[]' '{print $2}')
          TARGET_REPOSITORY=$(echo "$TITLE" | awk -F '[:[]' '{print $3}')
          TARGET_ARCH=$(echo "$TITLE" | awk -F '[:[]' '{print $4}' | awk '{print $1}')

          # 生成镜像清单文件
          echo "####需要同步的镜像清单" > image.txt
          while IFS= read -r line; do
            clean_line=$(echo "$line" | tr -d '\r' | sed 's/^[ \t]*//;s/[ \t]*$//')
            if [[ -n "$clean_line" && "$clean_line" =~ ^[a-zA-Z0-9/:\.\-]+$ ]]; then
              echo "$clean_line" >> image.txt
            fi
          done <<< "$BODY"

          # 输出仓库信息到环境变量
          echo "target_registry=${TARGET_REGISTRY}" >> "${GITHUB_OUTPUT}"
          echo "target_repository=${TARGET_REPOSITORY}" >> "${GITHUB_OUTPUT}"
          echo "target_arch=${TARGET_ARCH}" >> "${GITHUB_OUTPUT}"

          # 发送镜像清单到Issue
          gh issue comment "${{ github.event.issue.html_url }}" -b "$(cat <<EOF
镜像仓库：${TARGET_REGISTRY}
仓库名称空间：${TARGET_REPOSITORY}
架构：${TARGET_ARCH}
\`\`\`sh
$(cat image.txt)
\`\`\`
镜像同步中...[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
EOF
          )"

      - name: Login to Docker Registry
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          TARGET_REGISTRY: ${{ steps.parse-input.outputs.target_registry }}
        run: |
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD" "$TARGET_REGISTRY"

      - name: Pull, tag, and push images
        env:
          TARGET_REGISTRY: ${{ steps.parse-input.outputs.target_registry }}
          TARGET_REPOSITORY: ${{ steps.parse-input.outputs.target_repository }}
          TARGET_ARCH: ${{ steps.parse-input.outputs.target_arch }}
        run: |
          bash docker_image_pull.sh \
            --image-from-file="image.txt" \
            --tag \
            --push \
            --repo="${TARGET_REGISTRY}/${TARGET_REPOSITORY}" \
            --arch="${TARGET_ARCH}"

      - name: Send success notification
        if: ${{ success() }}
        uses: chf007/action-wechat-work@master
        env:
          WECHAT_WORK_BOT_WEBHOOK: ${{ secrets.QYWX_ROBOT_URL }}
        with:
          msgtype: markdown
          content: |
            # 镜像同步成功
            ```
            $(cat build.log)
            ```

      - name: Close issue on success
        if: ${{ success() }}
        run: |
          gh issue close "${{ github.event.issue.html_url }}" --reason completed
          gh issue edit "${{ github.event.issue.html_url }}" --add-label succeeded

      - name: Handle failure
        if: ${{ failure() }}
        run: |
          gh issue comment "${{ github.event.issue.html_url }}" -b "镜像同步失败...[详情请查看](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          gh issue edit "${{ github.event.issue.html_url }}" --add-label failure
          gh issue close "${{ github.event.issue.html_url }}" --reason not_planned
```

---

### 2. `docker_image_pull.sh`
```bash
#!/bin/bash

# ...（原有函数定义保持不变，仅修改关键逻辑）

function pull_image_from_docker() {
    local image_pull_list=()

    if [ -n "$image_file" ]; then
        while IFS= read -r line; do
            if [[ -n "$line" && "$line" != \#* ]]; then
                image_pull_list+=("$line")
            fi
        done < "$image_file"
    fi

    declare -a failed_images succeed_images pushed_images
    failed_images=() succeed_images=() pushed_images=()

    for image in "${image_pull_list[@]}"; do
        echo "开始拉取镜像 $image..."
        docker pull --platform "$target_arch" "$image"
        pull_status=$?

        if [ "$pull_status" -ne 0 ]; then
            echo "镜像 $image 拉取失败"
            failed_images+=("$image")
            continue
        else
            succeed_images+=("$image")

            if [ "$enable_tag" -eq 1 ]; then
                # 根据仓库域名格式生成新镜像名
                new_image="${repo_domain}/${image}"
                docker tag "$image" "$new_image"

                if [ "$enable_push" -eq 1 ]; then
                    docker push "$new_image"
                    pushed_images+=("$new_image")
                fi
            fi
        fi
    done

    # 生成构建报告
    {
        echo "成功拉取的镜像：${succeed_images[*]}"
        echo "失败的镜像：${failed_images[*]}"
        echo "已推送的镜像：${pushed_images[*]}"
    } > build.log
}
